.idea
.ipynb_checkpoints
.mypy_cache
.vscode
__pycache__
.pytest_cache
htmlcov
dist
site
.coverage
coverage.xml
.netlify
test.db
log.txt
Pipfile.lock
env3.*
env
docs_build
venv
docs.zip
archive.zip

# vim temporary files
*~
.*.sw?
.env
*.env
app/discord_bot/.DS_Store
.DS_Store
todo.md
celerybeat-schedule
test.csv
model_files/*
prod.env
df_files/*
.DS_Store
**/.DS_Store
app/api/.DS_Store
app/.DS_Store
export.sh
export.sh
app/api/.DS_Store
app/.DS_Store
model_files_retrain/*
local-files/*

infrastructure/tf/.terraform
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
infrastructure/tf/*.tfvars
infrastructure/tf/*.tfvars.json
infrastructure/tf/override.tf
infrastructure/tf/override.tf.json
infrastructure/tf/*_override.tf
infrastructure/tf/*_override.tf.json
infrastructure/tf/terraform.rc
todo.txt
report_stage.csv
/exp.csv
/exp_clean.csv
/python_cli.sh
report.csv
closer.csv
